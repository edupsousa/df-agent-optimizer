{"version":3,"sources":["hooks/useAgentStore/openZipFile.tsx","hooks/useAgentStore/loadAgentAction.tsx","hooks/useAgentStore/renameIntentsAction.tsx","hooks/useAgentStore/index.tsx","components/AgentImportForm.tsx","components/AppNavBar.tsx","components/IntentList.tsx","components/RenameIntents.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["openZipFile","file","a","zip","JSZip","loadAsync","agentFile","loadAgentAction","set","data","zipFile","getAgentConfigFromZipFile","agentConfig","getIntentsFromZipFile","intentList","isLoaded","rawData","INTENT_FILENAME_REGEX","Promise","all","map","parseIntentFile","async","contents","filename","getIntentFilename","name","intent","JSON","parse","Error","message","configFile","path","matches","exec","renameIntentsAction","get","api","intents","rawZipFile","forEach","newName","remove","stringify","generateAsync","type","compression","rawNewFile","loadAgent","initialState","useStore","create","persist","devtools","unloadAgent","renameIntents","stateActions","getStorage","sessionStorage","useAgentStore","createTrackedSelector","AgentImportForm","state","useState","setZipFile","handleSubmit","ev","preventDefault","stopPropagation","readFile","Form","onSubmit","Row","Col","File","id","label","onChange","target","files","length","custom","xs","Button","variant","disabled","resolve","reject","reader","FileReader","readAsBinaryString","onload","result","onerror","error","AppNavBar","Navbar","bg","expand","className","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","Text","displayName","onClick","IntentList","useMemo","slice","i","sort","b","RenameIntents","useRegexp","setUseRegexp","caseInsensitive","setCaseInsensitive","filterString","setFilterString","replacement","setReplacement","filterRegexp","setFilterRegexp","filter","test","toLowerCase","includes","useEffect","regExp","RegExp","undefined","e","caseInsenstiveReplace","value","needle","haystack","esc","replace","reg","Group","as","controlId","Label","column","sm","Control","span","offset","Check","checked","ListGroup","Item","replaceAll","App","Container","component","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a40be35.chunk.js","sourcesContent":["import JSZip from \"jszip\";\n\nexport async function openZipFile(file: string): Promise<JSZip> {\n  const zip = JSZip();\n  const agentFile = await zip.loadAsync(file);\n  return agentFile;\n}\n","import JSZip, { JSZipObject } from \"jszip\";\nimport { openZipFile } from \"./openZipFile\";\nimport { ActionCreator, AgentConfig, Intent, IntentListItem } from \"./types\";\n\nexport const loadAgentAction: ActionCreator<\"loadAgent\"> = (set) => async (\n  data: string\n) => {\n  const zipFile = await openZipFile(data);\n  const agentConfig = await getAgentConfigFromZipFile(zipFile);\n  const intentList = await getIntentsFromZipFile(zipFile);\n  set({ agentConfig, intentList, isLoaded: true, rawData: data });\n};\n\nconst INTENT_FILENAME_REGEX = /^intents\\/(((?!_usersays_).)*)\\.json$/;\n\nasync function getIntentsFromZipFile(\n  agentFile: JSZip\n): Promise<IntentListItem[]> {\n  return Promise.all(\n    agentFile.file(INTENT_FILENAME_REGEX).map(parseIntentFile)\n  );\n}\n\nasync function parseIntentFile(file: JSZipObject): Promise<IntentListItem> {\n  const contents = await file.async(\"string\");\n  try {\n    const filename = getIntentFilename(file.name);\n    const intent = JSON.parse(contents) as Intent;\n    return { filename, intent };\n  } catch (e) {\n    throw new Error(`Error parsing intent file ${file.name}: ${e.message}`);\n  }\n}\n\nasync function getAgentConfigFromZipFile(\n  agentFile: JSZip\n): Promise<AgentConfig> {\n  const configFile = agentFile.file(\"agent.json\");\n  if (!configFile) throw new Error(\"Agent config not found (agent.json).\");\n\n  return JSON.parse(await configFile.async(\"string\")) as AgentConfig;\n}\n\nfunction getIntentFilename(path: string): string {\n  const matches = INTENT_FILENAME_REGEX.exec(path);\n  if (matches === null)\n    throw new Error(`Error extracting intent name from intent file ${path}`);\n  const [, filename] = matches;\n  return filename;\n}\n","import { openZipFile } from \"./openZipFile\";\nimport { ActionCreator } from \"./types\";\n\nexport const renameIntentsAction: ActionCreator<\"renameIntents\"> = (\n  set,\n  get,\n  api\n) => async (intents) => {\n  const rawZipFile = get().rawData;\n  if (rawZipFile === null)\n    throw new Error(\"Can't rename intents, zip file isn't loaded.\");\n  const zipFile = await openZipFile(rawZipFile);\n  intents.forEach(({ filename, intent, newName }) => {\n    if (intent.name === newName) return;\n    zipFile.remove(`intents/${filename}.json`);\n    zipFile.file(\n      `intents/${newName}.json`,\n      JSON.stringify({ ...intent, name: newName }, null, 2)\n    );\n  });\n  const rawNewFile = await zipFile.generateAsync({\n    type: \"binarystring\",\n    compression: \"DEFLATE\",\n  });\n  return get().loadAgent(rawNewFile);\n};\n","import { createTrackedSelector } from \"react-tracked\";\nimport create from \"zustand\";\nimport { devtools, persist } from \"zustand/middleware\";\nimport { loadAgentAction } from \"./loadAgentAction\";\nimport { renameIntentsAction } from \"./renameIntentsAction\";\nimport { ActionsCreator, State, StateProperties } from \"./types\";\n\nexport type { AgentConfig, Intent } from \"./types\";\n\nconst initialState: StateProperties = {\n  isLoaded: false,\n  agentConfig: null,\n  intentList: null,\n  rawData: null,\n};\n\nconst stateActions: ActionsCreator = (set, get, api) => ({\n  loadAgent: loadAgentAction(set, get, api),\n  unloadAgent: () => set(initialState),\n  renameIntents: renameIntentsAction(set, get, api),\n});\n\nconst useStore = create<State>(\n  persist(\n    devtools((set, get, api) => ({\n      ...initialState,\n      ...stateActions(set, get, api),\n    })),\n    {\n      name: \"agent-storage\",\n      getStorage: () => sessionStorage,\n    }\n  )\n);\n\nconst useAgentStore = createTrackedSelector(useStore);\n\nexport default useAgentStore;\n","import React, { useState } from \"react\";\nimport { Button, Col, Form } from \"react-bootstrap\";\nimport useAgentStore from \"hooks/useAgentStore\";\n\nexport default function AgentImportForm() {\n  const state = useAgentStore();\n  const [zipFile, setZipFile] = useState<null | File>(null);\n  const handleSubmit = async (ev: React.FormEvent<HTMLFormElement>) => {\n    ev.preventDefault();\n    ev.stopPropagation();\n    if (zipFile === null) return;\n    state.loadAgent(await readFile(zipFile));\n  };\n\n  const handleAgentFileChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    if (ev.target.files && ev.target.files.length > 0)\n      setZipFile(ev.target.files[0]);\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <h1>Import Agent</h1>\n      <Form.Row>\n        <Col>\n          <Form.File\n            id=\"zipFile\"\n            label={\n              zipFile\n                ? zipFile.name\n                : \"Select an exported DialogFlow Agent (.zip file)\"\n            }\n            onChange={handleAgentFileChange}\n            custom\n          />\n        </Col>\n        <Col xs=\"auto\">\n          <Button variant=\"primary\" type=\"submit\" disabled={zipFile === null}>\n            Import Agent\n          </Button>\n        </Col>\n      </Form.Row>\n    </Form>\n  );\n}\n\nasync function readFile(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsBinaryString(file);\n    reader.onload = () => resolve(reader.result as string);\n    reader.onerror = () => reject(reader.error);\n  });\n}\n","import React from \"react\";\nimport { Button, Nav, Navbar } from \"react-bootstrap\";\nimport { Link } from \"wouter\";\nimport useAgentStore from \"hooks/useAgentStore\";\n\nexport default function AppNavBar() {\n  const state = useAgentStore();\n\n  return (\n    <Navbar bg=\"light\" expand=\"lg\" className=\"mb-3\">\n      <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          {state.agentConfig && (\n            <>\n              <Link href=\"/intents\">\n                <Nav.Link>List Intents</Nav.Link>\n              </Link>\n              <Link href=\"/rename-intents\">\n                <Nav.Link>Rename Intents</Nav.Link>\n              </Link>\n            </>\n          )}\n          {!state.agentConfig && <Nav.Link href=\"#home\">Import Agent</Nav.Link>}\n        </Nav>\n        <Navbar.Text>\n          Agent: {!state.agentConfig && <span>None</span>}\n          {state.agentConfig && (\n            <span>\n              {state.agentConfig.displayName}\n              <Button\n                variant=\"outline-dark ml-2\"\n                onClick={() => state.unloadAgent()}\n              >\n                Unload Agent\n              </Button>\n            </span>\n          )}\n        </Navbar.Text>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport useAgentStore from \"hooks/useAgentStore\";\n\nexport default function IntentList() {\n  const { intentList } = useAgentStore();\n  const intents = useMemo(\n    () =>\n      intentList === null\n        ? []\n        : intentList\n            .slice()\n            .map((i) => i.intent)\n            .sort((a, b) => (a.name > b.name ? 1 : a.name < b.name ? -1 : 0)),\n    [intentList]\n  );\n\n  return (\n    <div>\n      <h1>Intents</h1>\n      <ul>\n        {intents && intents.map((i) => <li key={i.id}>{i.name}</li>)}\n        {!intents && <li>No intents to show</li>}\n      </ul>\n    </div>\n  );\n}\n","import useAgentStore, { Intent } from \"hooks/useAgentStore\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Col, Form, ListGroup, Row } from \"react-bootstrap\";\n\nexport default function RenameIntents() {\n  const [useRegexp, setUseRegexp] = useState(false);\n  const [caseInsensitive, setCaseInsensitive] = useState(false);\n  const [filterString, setFilterString] = useState(\"\");\n  const [replacement, setReplacement] = useState(\"\");\n  const [filterRegexp, setFilterRegexp] = useState<RegExp | null>(null);\n  const { intentList } = useAgentStore();\n  const intents = useMemo(\n    () =>\n      intentList === null\n        ? []\n        : intentList\n            .slice()\n            .map((i) => i.intent)\n            .filter((i) =>\n              useRegexp && filterRegexp\n                ? filterRegexp.test(i.name)\n                : (caseInsensitive ? i.name.toLowerCase() : i.name).includes(\n                    caseInsensitive ? filterString.toLowerCase() : filterString\n                  )\n            )\n            .sort((a, b) => (a.name > b.name ? 1 : a.name < b.name ? -1 : 0)),\n    [intentList, filterRegexp, useRegexp, filterString, caseInsensitive]\n  );\n\n  useEffect(() => {\n    if (!useRegexp) return;\n    try {\n      const regExp = new RegExp(\n        filterString,\n        caseInsensitive ? \"i\" : undefined\n      );\n      setFilterRegexp(regExp);\n    } catch (e) {\n      setFilterRegexp(null);\n    }\n  }, [filterString, caseInsensitive, useRegexp]);\n\n  const getReplacement = (name: string): string => {\n    if (!useRegexp)\n      return caseInsensitive\n        ? caseInsenstiveReplace(name, filterString, replacement)\n        : name.replaceAll(filterString, replacement);\n    if (!filterRegexp) return name;\n    return name.replace(filterRegexp, replacement);\n  };\n\n  const caseInsenstiveReplace = (\n    value: string,\n    needle: string,\n    haystack: string\n  ): string => {\n    var esc = needle.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n    var reg = new RegExp(esc, \"ig\");\n    return value.replace(reg, haystack);\n  };\n\n  const renderIntent = (i: Intent) => {\n    return (\n      <ListGroup.Item key={i.id}>\n        <Row>\n          <Col>{i.name}</Col>\n          <Col xs=\"auto\">{\"->\"}</Col>\n          <Col className=\"text-right\">{getReplacement(i.name)}</Col>\n        </Row>\n      </ListGroup.Item>\n    );\n  };\n\n  return (\n    <div>\n      <h1>Rename Intents</h1>\n      <Form>\n        <Form.Group as={Row} controlId=\"filter\">\n          <Form.Label column sm={2}>\n            Find:\n          </Form.Label>\n          <Col sm={10}>\n            <Form.Control\n              type=\"text\"\n              value={filterString}\n              onChange={(ev) => setFilterString(ev.target.value)}\n            />\n          </Col>\n        </Form.Group>\n        <Form.Group as={Row} controlId=\"replacement\">\n          <Form.Label column sm={2}>\n            Replace:\n          </Form.Label>\n          <Col sm={10}>\n            <Form.Control\n              type=\"text\"\n              value={replacement}\n              onChange={(ev) => setReplacement(ev.target.value)}\n            />\n          </Col>\n        </Form.Group>\n        <Form.Group as={Row} controlId=\"caseInsensitive\">\n          <Col sm={{ span: 10, offset: 2 }}>\n            <Form.Check\n              label=\"Case Insensitive\"\n              checked={caseInsensitive}\n              onChange={(ev) => setCaseInsensitive(ev.target.checked)}\n            />\n          </Col>\n        </Form.Group>\n        <Form.Group as={Row} controlId=\"isRegexp\">\n          <Col sm={{ span: 10, offset: 2 }}>\n            <Form.Check\n              label=\"Regular Expression\"\n              checked={useRegexp}\n              onChange={(ev) => setUseRegexp(ev.target.checked)}\n            />\n          </Col>\n        </Form.Group>\n      </Form>\n      Matched {intents.length} intents.\n      <ListGroup>{intents && intents.map(renderIntent)}</ListGroup>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { Redirect, Route, Switch } from \"wouter\";\nimport AgentImportForm from \"components/AgentImportForm\";\nimport AppNavBar from \"components/AppNavBar\";\nimport IntentList from \"components/IntentList\";\nimport RenameIntents from \"components/RenameIntents\";\nimport useAgentStore from \"hooks/useAgentStore\";\n\nfunction App() {\n  const state = useAgentStore();\n\n  return (\n    <>\n      <AppNavBar />\n      <Container>\n        {state.agentConfig && (\n          <Switch>\n            <Route path=\"/intents\" component={IntentList} />\n            <Route path=\"/rename-intents\" component={RenameIntents} />\n            <Route>\n              <Redirect to=\"/intents\" />\n            </Route>\n          </Switch>\n        )}\n        {!state.agentConfig && (\n          <Switch>\n            <Route path=\"/import\" component={AgentImportForm} />\n            <Route>\n              <Redirect to=\"/import\" />\n            </Route>\n          </Switch>\n        )}\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}